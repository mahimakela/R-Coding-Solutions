# An example
x<-c(1:10)
x[(x>8)]| (X<5)]
x
x[(x>8) | (x>4)]
rm(x,x2)
x<-c(1:10)
> x[(x>8)]| (X<5)]
x2<-c(1:10) x<-c(1:10)
x<-c(1:10)
x
z2 <-c(1,2,3,4,5,6)
z3<-c( 6,7,8,9,0)
plot(z1,z2)
title
x<-c(1:10)
for(x<- 1:10)
x<- 1:10
sum(2,7,5)
> x
sum(2,7,5)
x
mean(x, na.rm=TRUE)
prod(x, na.rm=TRUE)
sum(2,7,5)
x
sum(2,7,5)
sum=x
sum(2,7,5)
sum=x
sum(2,7,5)
sum=x
$ Day    :int  1 2 3 4 5 6 7 8 9 10 ...
'data.frame':	153 obs. of  6 variables:
m
m<-[1:10]
x<-c [1:10]
x<-list(1,"a",TRUE)
x<-list(1,"a",TRUE)
x
x<-vector(1,"mahima","3",FALSE)
x<-vector(1,"mahima","3",FALSE,length=4)
x<-vector("list",length=4)
x
x <- list(1, "a", TRUE)
x
x <- vector("list", length = 3)
x
students = list(rollno,snames,marks)
marks = c(78.25,59.45,63.85)
rollno = c(101,102,103)
snames = c('John','Jonny','Jack')
students = list(rollno,snames,marks)
students
students=list(c(101,102,103),c('John','Jonny','Jack'), marks = c(78.25,59.45,63.85))
students
students=list(c(101,102,103),c('John','Jonny','Jack'), marks = c(78.25,59.45,63.85))
students
students[1]
students[2]
students[3]
rollno = c(101,102,103)
snames = c('John','Jonny','Jack')
marks = c(78.25,59.45,63.85)
students = list(rollno, snames, marks)
students
students[1]
students[2]
students[3]
students[[1]]
students[[2]]
students[[3]]
students[[1]][2]
students[[2]][1]
students[[3]][3]
students[[3]]
students = list('ids'=rollno,'names'=snames,'score'=marks)
print(students$ids)
print(students$names)
print(students$score)
students[c('ids','score')]
students[c(1,3)]
print(names)
print(studentas$names)
print(students$names)
print(students$ids)
library(dplyr)
library(dplyr)
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
setwd("~/r codes")
library(dplyr)
mydata <- read.csv('murders.csv')
mydata
dim(mydata)
str(mydata)
summary(mydata)
apply(X=mydata[,c(4,6)], MARGIN = 2, FUN = mean,na.rm=T)
mydata[c(1,4,5)]
#mydata[c(mydata, state,population,total)]#cannot use
names(mydata)
names(mydata)[c(1,4,5)]
subset <- select(mydata, state:population)
subset
subset <- select(mydata, state,population,total)
install.packages('dplyr')
dim(mydata)
install.packages('dplyr')
dim(mydata)
install.packages('dplyr')
library(dplyr)
mydata <- read.csv('murders.csv')
mydata
dim(mydata)
str(mydata)
summary(mydata)
apply(X=mydata[,c(4,6)], MARGIN = 2, FUN = mean,na.rm=T)
mydata[c(1,4,5)]
#mydata[c(mydata, state,population,total)]#cannot use
names(mydata)
names(mydata)[c(1,4,5)]
subset <- select(mydata, state:population)
subset
subset <- select(mydata, state,population,total)
rlang::last_trace()
#Arrange
library(dplyr)
mydata <- read.csv('murders.csv')
mydata
names(mydata)
subset <- arrange(mydata,population)
subset
subset1 <- select(subset,state,population,total)
#rename
library(dplyr)
mydata <- read.csv('murders.csv')
mydata
dim(mydata)
str(mydata)
names(mydata)
mydata1 <- rename(mydata, abbrivation = abb, homocide = total)
prob =dbinom(c(10:15),size=15,0.4)
sum(prob)
prob =dbinom(c(3:8),size=15,0.4)
sum(prob)
prob=dbinom(6, 9,0.08)
prob
prob=dbinom(6,9,0.08)
prob
prob=dbinom(6,9,0.8)
prob
prob=dbinom(2,5,0.5)
prob
prob=dbinom(c(0:4),5,0.5)
prob(sum)
prob=dbinom(c(4,5),5,0.5)
prob(sum)
prob=dbinom(c(4,5),5,0.5)
sum(prob)
z1 = pnorm(778,mean=800,sd=40)
z1
z1 = pnorm(778,mean=800,sd=40)
z1
z2=pnorm(834,mean=800,sd=40)
z2
z2-z1
prob = qnorm(0,35,0.1)
prob
prob = dbinom(c(1:20),size=20,0.03)
prob = dbinom(c(1:20),size=20,0.03)
prob
prob = dbinom(c(1:20),size=20,0.03)
prob
sum(prob)
prob =dbinom(c(0:5),9,0.8)
prob
sum(prob)
prob =pbinom(c(0:5),9,0.8)
prob
prob =pbinom(c(0:5),9,0.8)
sum(prob)
prob =dbinom(c(0:5),9,0.8)
sum(prob)
prob =pbinom(c(0:5),9,0.8)
prob
prob =dbinom(c(0:5),9,0.8)
sum(prob)
prob =pbinom(5,9,0.8)
prob
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5)
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5)
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
x <- seq(0,50,by = 1)
y <- dbinom(x,50,0.5)
png(file = "dbinom.png")
plot(x,y)
x <- seq(0,50,by = 1)
y <- dbinom(x,5,0.6)
y <- dbinom(5,5,0.6)
y <- dbinom(5,5,0.6)
y
png(file = "dbinom.png")
plot(x,y)
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,5,0.6)
y
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,5,0.6)
y
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,5,0.6)
y
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,5,0.6)
y
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,5,0.6)
y
# Give the chart file a name.
png(file = "dbinom.png")
# Plot the graph for this sample.
plot(x,y)
# Save the file.
dev.off()
x <- qbinom(0.25,51,1/2)
print(x)
x <- pbinom(26,51,0.5)
print(x)
x <- rbinom(8,150,.4)
print(x)
x <- seq(-4, 4, length.out = 1000) # create a sequence of values
y <- dnorm(x, mean = 0, sd = 1) # calculate the PDF
plot(x, y, type = "l", main = "Normal Probability Density Function", xlab = "Value", ylab = "Density")
x <- seq(-4, 4, length.out = 1000) # create a sequence of values
y <- dnorm(x, mean = 0, sd = 1) # calculate the PDF
plot(x, y, type = "l", main = "Normal Probability Density Function", xlab = "Value", ylab = "Density")
dbinom(3, size = 13, prob = 1 / 6)
probabilities <- dbinom(x = c(0:10), size = 10, prob = 1 / 6)
data.frame(x, probs)
data.frame(x, probs)
plot(0:10, probabilities, type = "l")
prob = qnorm(0,35,0.1)
prob
x <- seq(-4, 4, length.out = 1000) # create a sequence of values
dbinom(3, size = 13, probs = 1 / 6)
dbinom(3, size = 13, prob = 1 / 6)
probabilities <- dbinom(x = c(0:10), size = 10, prob = 1 / 6)
data.frame(x, prob)
plot(0:10, probabilities, type = "l")
